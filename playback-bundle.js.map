{
  "version": 3,
  "sources": ["ieeevisdb.ts", "replayvideoplayer.ts", "playback.ts"],
  "sourcesContent": ["import {AdminsData, Log, Room, RoomDayLogs, Session} from \"./session\";\r\n\r\ndeclare var firebase: Firebase;\r\n\r\nexport class IeeeVisDb {\r\n    private sessionRef?: FirebaseRef;\r\n    private roomRef?: FirebaseRef;\r\n    private adminsRef?: FirebaseRef;\r\n    private logsRef?: FirebaseRef;\r\n\r\n    constructor() {\r\n        this.initFirebase();\r\n    }\r\n\r\n    initFirebase() {\r\n        firebase.initializeApp({\r\n            apiKey: \"AIzaSyCfFQ-eN52od55QBFZatFImgZgEDHK_P4E\",\r\n            authDomain: \"ieeevis.firebaseapp.com\",\r\n            databaseURL: \"https://ieeevis-default-rtdb.firebaseio.com\",\r\n            projectId: \"ieeevis\",\r\n            storageBucket: \"ieeevis.appspot.com\",\r\n            messagingSenderId: \"542997735159\",\r\n            appId: \"1:542997735159:web:6d9624111ec276a61fd5f2\",\r\n            measurementId: \"G-SNC8VC6RFM\"\r\n        });\r\n        firebase.analytics();\r\n\r\n        this.logsRef = firebase.database().ref('logs/');\r\n    }\r\n\r\n    loadRoom(roomId: string, onRoomUpdated: (room: Room) => void) {\r\n        this.roomRef = firebase.database().ref('rooms/' + roomId) as FirebaseRef;\r\n\r\n        this.roomRef.on('value', (snapshot) => {\r\n            onRoomUpdated(snapshot.val() as Room);\r\n        });\r\n    }\r\n\r\n    loadSession(sessionId: string, onSessionUpdated: (session: Session) => void) {\r\n        this.sessionRef = firebase.database().ref('sessions/' + sessionId);\r\n\r\n        this.sessionRef!.on('value', (snapshot) => {\r\n            onSessionUpdated(snapshot.val() as Session);\r\n        });\r\n    }\r\n\r\n    loadAllSessions(callback: (sessionsData: {[id: string]: Session}) => void) {\r\n        const ref = firebase.database().ref('sessions/');\r\n        ref.on('value', snapshot => callback(snapshot.val()));\r\n    }\r\n\r\n    loadAdmins(callback: (adminsData: AdminsData) => void) {\r\n        this.adminsRef = firebase.database().ref('admins');\r\n\r\n        this.adminsRef!.on('value', (snapshot) => {\r\n            callback(snapshot.val() as AdminsData);\r\n        });\r\n    }\r\n\r\n    set(path: string, value: string|number|{}) {\r\n        this.sessionRef?.child(path).set(value);\r\n    }\r\n\r\n    setRoom(path: string, value: string|number) {\r\n        this.roomRef?.child(path).set(value);\r\n    }\r\n\r\n    log(log: Log) {\r\n        const date = new Date(log.time);\r\n        const month = date.getUTCMonth() + 1;\r\n        const day = date.getUTCDate();\r\n        const year = date.getUTCFullYear();\r\n        const dayString = `${year}-${month}-${day}`;\r\n\r\n        const hour = date.getUTCHours();\r\n        const minute = date.getUTCMinutes();\r\n        const second = date.getUTCSeconds();\r\n        const milli = date.getUTCMilliseconds();\r\n        const timeString = `${hour}:${minute}:${second}:${milli}`;\r\n\r\n        this.logsRef?.child(dayString).child(log.room).child(timeString).set(log);\r\n    }\r\n\r\n    loadLogs(room: string, day: string, callback: (logs: RoomDayLogs) => void) {\r\n        const logsRef = firebase.database().ref(`logs/${day}/${room}`);\r\n\r\n        logsRef!.on('value', (snapshot) => {\r\n            callback(snapshot.val() as RoomDayLogs);\r\n        });\r\n    }\r\n}\r\n\r\ninterface FirebaseRef {\r\n    child: (childName: string) => FirebaseRef;\r\n    set: (value: string|number|{}) => void;\r\n    on: (event: \"value\", cb: (data: any) => void) => void;\r\n}\r\n\r\ninterface Firebase {\r\n    initializeApp: (data: {\r\n        apiKey: string,\r\n        authDomain: string,\r\n        databaseURL: string,\r\n        projectId: string,\r\n        storageBucket: string,\r\n        messagingSenderId: string,\r\n        appId: string,\r\n        measurementId: string\r\n    }) => void;\r\n    analytics: () => void;\r\n    database: () => {\r\n        ref: (name: string) => FirebaseRef\r\n    }\r\n}\r\n", "import {PlayerState, YoutubePlayer} from \"./youtubeplayer\";\r\n\r\ndeclare var YT: YouTube;\r\n\r\nexport class IeeeVisReplayVideoPlayer {\r\n    player?: YoutubePlayer;\r\n    audioContext = new AudioContext();\r\n\r\n    private width = 400;\r\n    private height = 300;\r\n\r\n    youtubeApiReady = false;\r\n    youtubePlayerLoaded = false;\r\n    youtubePlayerReady = false;\r\n\r\n    constructor(private elementId: string,\r\n                private getCurrentVideoId: OmitThisParameter<() => string | undefined>,\r\n                private getStartEndTimes: () => [number, number]) {\r\n        this.init();\r\n    }\r\n\r\n    onYouTubeIframeAPIReady() {\r\n        this.youtubeApiReady = true;\r\n    }\r\n\r\n    updateVideo() {\r\n        if(!this.youtubeApiReady) {\r\n            return;\r\n        }\r\n\r\n        if(!this.youtubePlayerLoaded) {\r\n            this.loadYoutubePlayer();\r\n        } else {\r\n            if(!this.getCurrentVideoId() && this.player) {\r\n                this.player.stopVideo();\r\n            } else {\r\n                this.changeYoutubeVideo();\r\n            }\r\n        }\r\n    }\r\n\r\n    setSize(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        if(!this.player) {\r\n            return;\r\n        }\r\n        this.player.setSize(width, height);\r\n    }\r\n\r\n    private init() {\r\n        const tag = document.createElement('script');\r\n        tag.src = \"https://www.youtube.com/iframe_api\";\r\n        const firstScriptTag = document.getElementsByTagName('script')[0];\r\n        firstScriptTag.parentNode!.insertBefore(tag, firstScriptTag);\r\n    }\r\n\r\n    private onPlayerReady() {\r\n        console.log('player ready', this.player, this.getCurrentVideoId());\r\n        this.youtubePlayerReady = true;\r\n\r\n        console.log(this.audioContext);\r\n        if(this.audioContext.state === \"suspended\") {\r\n            this.player!.mute();\r\n        }\r\n        this.player!.playVideo();\r\n\r\n\r\n        this.updateVideo();\r\n    }\r\n\r\n    private onPlayerStateChange(state: {target: YoutubePlayer, data: PlayerState}) {\r\n        // if(state.data === PlayerState.UNSTARTED) {\r\n        //     // This is to force the player to go to 0 because it does not recognize 0 as a start time in loadVideoById.\r\n        //     this.player!.seekTo(this.getCurrentStartTimeS() || 0, true);\r\n        // }\r\n\r\n        // if(state.data === PlayerState.PLAYING || state.data === PlayerState.BUFFERING) {\r\n        //     const [startTime] = this.getStartEndTimes();\r\n        //     const currentTime = this.player!.getCurrentTime();\r\n        //     if(Math.abs(startTime - currentTime) > 5) {\r\n        //         this.player!.seekTo(startTime, true);\r\n        //         console.log('lagging behind. seek.', this.getCurrentStartTimeS(), this.player!.getCurrentTime(), this.player!.getDuration(), this.player);\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    private loadYoutubePlayer() {\r\n        this.youtubePlayerLoaded = true;\r\n        const [start, end] = this.getStartEndTimes();\r\n        console.log('loadYoutubePlayer');\r\n\r\n        this.player = new YT.Player(this.elementId, {\r\n            width: this.width,\r\n            height: this.height,\r\n            videoId: this.getCurrentVideoId(),\r\n\r\n            playerVars: {\r\n                'playsinline': 1,\r\n                'autoplay': 1,\r\n                'controls': 1,\r\n                'rel': 0,\r\n                'modestbranding': 1,\r\n                'mute': 0,\r\n                start,\r\n                end\r\n            },\r\n            events: {\r\n                'onReady': this.onPlayerReady.bind(this),\r\n                'onStateChange': this.onPlayerStateChange.bind(this),\r\n            }\r\n        });\r\n    }\r\n\r\n    private changeYoutubeVideo() {\r\n        // The seeking in the following line does not work for 0 (see workaround above).\r\n        const [startSeconds, endSeconds] = this.getStartEndTimes();\r\n        this.player!.loadVideoById({videoId: this.getCurrentVideoId()!, startSeconds, endSeconds});\r\n        //console.log('test', startSeconds, endSeconds, {videoId: this.getCurrentVideoId()!, startSeconds, endSeconds, start: startSeconds, end: endSeconds});\r\n        this.player!.playVideo();\r\n    }\r\n\r\n    private getCurrentStartTimeS() {\r\n        return this.getStartEndTimes()[0];\r\n        // const timeMs = new Date().getTime();\r\n        // const videoStartTimestampMs = this.getCurrentSessionStatus()?.videoStartTimestamp || 0;\r\n        //\r\n        // return Math.round((timeMs - videoStartTimestampMs) / 1000);\r\n        //return 0;\r\n    }\r\n}\r\n\r\ninterface YouTube {\r\n    Player: YouTubePlayerConstructor;\r\n}\r\n\r\ninterface YouTubePlayerConstructor {\r\n    new(elementId: string, data: any): YoutubePlayer\r\n}\r\n", "import {Room, Session, SessionState, SessionStage, RoomDayLogs, Log} from \"./session\";\r\nimport {IeeeVisDb} from \"./ieeevisdb\";\r\nimport {IeeeVisVideoPlayer} from \"./videoplayer\";\r\nimport {IeeeVisReplayVideoPlayer} from \"./replayvideoplayer\";\r\n\r\nclass IeeeVisStreamPlayback {\r\n    static PLAYER_ELEMENT_ID = 'ytplayer';\r\n    static CONTENT_WRAPPER_ID = 'content';\r\n\r\n    room?: Room;\r\n    currentSlice?: RoomSlice;\r\n    player: IeeeVisReplayVideoPlayer;\r\n    db: IeeeVisDb;\r\n\r\n    width = window.innerWidth;\r\n    height = window.innerHeight; // Placeholder values. Will be replaced in the resize function.\r\n    static HEADERS_HEIGHT = 41;\r\n    CHAT_PADDING_LEFT_PX = 30;\r\n\r\n    PANEL_WIDTH_PERCENT = 30;\r\n    private sessionsData: {[id: string]: Session} = {};\r\n    private roomSlices: RoomSlice[] = [];\r\n\r\n    constructor(private ROOM_ID: string, private DAY: string) {\r\n        this.db = new IeeeVisDb();\r\n        this.player = new IeeeVisReplayVideoPlayer(IeeeVisStreamPlayback.PLAYER_ELEMENT_ID,\r\n            this.getCurrentVideoId.bind(this),\r\n            this.getCurrentStartEndTime.bind(this));\r\n        this.db.loadRoom(ROOM_ID, room => this.onRoomUpdated(room));\r\n\r\n        this.resize();\r\n        window.addEventListener('resize', this.resize.bind(this));\r\n\r\n        this.db.loadAllSessions(sessionsData => {\r\n            this.sessionsData = sessionsData;\r\n            this.db.loadLogs(ROOM_ID, DAY, this.getLogs.bind(this));\r\n        })\r\n    }\r\n\r\n    getLogs(logsData: RoomDayLogs) {\r\n        const slices: RoomSlice[] = [];\r\n        const logs = Object.values(logsData) as Log[];\r\n\r\n        for(let i = 1; i < logs.length; i++) {\r\n            this.addSliceIfYouTube(slices, logs[i-1], logs[i].time - logs[i-1].time);\r\n        }\r\n        this.addSliceIfYouTube(slices, logs[logs.length-1], -1)\r\n\r\n        this.roomSlices = slices;\r\n\r\n        this.updateTable();\r\n    }\r\n\r\n    updateTable() {\r\n        if(!this.roomSlices.length) {\r\n            return;\r\n        }\r\n\r\n        const tableBody = document.getElementById('videos-table-body') as HTMLTableElement;\r\n        tableBody.innerHTML = '';\r\n\r\n        //const currentVideoPlayedMs = new Date().getTime() - this.session.currentStatus.videoStartTimestamp;\r\n\r\n        for(const slice of this.roomSlices) {\r\n            const stage = slice.stage;\r\n            const active = this.currentSlice === slice;\r\n\r\n            let duration = '';\r\n            const startText = !slice.log.time ? '' :\r\n                new Date(slice.log.time).toISOString().substr(0, 16).replace('T', ', ');\r\n\r\n            if(slice.duration != -1) {\r\n                const durationMs = slice.duration;\r\n                duration = new Date(durationMs).toISOString().substr(11, 8)\r\n            } else {\r\n                duration = '-';\r\n            }\r\n\r\n            const tr = document.createElement('tr');\r\n            tr.className = active ? 'active' : '';\r\n            tr.innerHTML = `\r\n                <td>${stage.title}</a></td>\r\n                <td>${duration}</td>`;\r\n            tr.addEventListener('click', () => this.clickStage(slice))\r\n\r\n            tableBody.append(tr);\r\n        }\r\n    }\r\n\r\n    clickStage(slice: RoomSlice) {\r\n        console.log('loading slice', slice);\r\n        this.currentSlice = slice;\r\n        this.player.updateVideo();\r\n        this.updateTable();\r\n    }\r\n\r\n    getCurrentStartEndTime(): [number, number] {\r\n        const startS = Math.round((this.currentSlice?.startTimeMs || 0) / 1000);\r\n        const endS = Math.round((this.currentSlice?.endTimeMs || 0) / 1000);\r\n        return [startS, endS];\r\n    }\r\n\r\n    addSliceIfYouTube(slices: RoomSlice[], log: Log, duration: number) {\r\n        const slice = this.createSliceIfYouTube(log, duration);\r\n        if(slice) {\r\n            slices.push(slice);\r\n        }\r\n    }\r\n\r\n    createSliceIfYouTube(log: Log, duration: number): RoomSlice | undefined {\r\n        const stage = this.getSessionStage(log);\r\n        if(!stage.youtubeId) {\r\n            return;\r\n        }\r\n        const startTimeMs = stage.youtubeId && stage.live ?\r\n            log.status.videoStartTimestamp - log.status.liveStreamStartTimestamp  : 0;\r\n        const endTimeMs = startTimeMs + duration;\r\n        return {\r\n            duration,\r\n            stage,\r\n            log,\r\n            startTimeMs,\r\n            endTimeMs,\r\n        };\r\n    }\r\n\r\n    getSessionStage(log: Log) {\r\n        return this.sessionsData[log.session].stages[log.status.videoIndex];\r\n    }\r\n\r\n    onYouTubeIframeAPIReady() {\r\n        this.player.onYouTubeIframeAPIReady();\r\n    }\r\n\r\n    onRoomUpdated(room: Room) {\r\n        this.room = room;\r\n    }\r\n\r\n    onSessionUpdated(id: string, session: Session) {\r\n        /*const lastSession: Session | undefined = this.currentSession ? {...this.currentSession} : undefined;\r\n        const lastYtId = this.getCurrentVideoId();\r\n        this.currentSession = session;\r\n\r\n        document.getElementById('session-name')!.innerText = this.getCurrentStage()?.title || '';\r\n\r\n        if(this.getCurrentVideoId() != lastYtId) {\r\n            this.player.updateVideo();\r\n        }\r\n        if(this.getCurrentStage()?.imageUrl != this.getCurrentStageOfSession(lastSession)?.imageUrl) {\r\n            this.loadPreviewImage();\r\n        }\r\n\r\n        this.resize();*/\r\n    }\r\n\r\n    /*getCurrentStage(): SessionStage | undefined {\r\n        return this.getCurrentStageOfSession(this.currentSession);\r\n    }\r\n\r\n    getCurrentStageOfSession(session: Session | undefined) {\r\n        return session?.stages[session?.currentStatus?.videoIndex];\r\n    }*/\r\n\r\n    getCurrentVideoId() {\r\n        return this.currentSlice?.stage.youtubeId;\r\n        //return this.getCurrentStage()?.youtubeId;\r\n    }\r\n\r\n    resize() {\r\n        this.width = window.innerWidth;\r\n        this.height = window.innerHeight - 15;\r\n\r\n        document.getElementById('youtube-outer')!.style.display = '';\r\n        document.getElementById('image-outer')!.style.display = 'none';\r\n        document.getElementById('gathertown-outer')!.style.display = 'none';\r\n\r\n        const contentWidth = this.width * (100 - this.PANEL_WIDTH_PERCENT) / 100;\r\n        const mainContentHeight = this.height - IeeeVisStreamPlayback.HEADERS_HEIGHT;\r\n\r\n        const contentWrap = document.getElementById(IeeeVisStreamPlayback.CONTENT_WRAPPER_ID)!;\r\n        contentWrap.style.width = `${contentWidth}px`;\r\n        this.player.setSize(contentWidth, mainContentHeight);\r\n\r\n        const panelWidth = this.width * this.PANEL_WIDTH_PERCENT / 100 - this.CHAT_PADDING_LEFT_PX;\r\n        document.getElementById('sidepanel')!.style.width = `${panelWidth}px`;\r\n    }\r\n}\r\n\r\nconst search = location.search.indexOf('room=') === -1 ? '' :\r\n    location.search.substr(location.search.indexOf('room=') + 'room='.length);\r\nconst dayIndex = search.indexOf('day=');\r\nexport declare var onYouTubeIframeAPIReady: () => void;\r\nexport declare var playback: IeeeVisStreamPlayback;\r\n\r\nif(search && dayIndex) {\r\n    const roomId = search.substr(0, dayIndex - 1);\r\n    const dayString = search.substr(dayIndex + 'day='.length);\r\n\r\n    playback = new IeeeVisStreamPlayback(roomId, dayString);\r\n    document.getElementById('wrapper')!.style.display = 'flex';\r\n    onYouTubeIframeAPIReady = () => {\r\n        playback.onYouTubeIframeAPIReady();\r\n    }\r\n} else {\r\n    document.getElementById('param-error')!.style.display = 'block';\r\n}\r\n\r\ninterface RoomSlice {\r\n    duration: number,\r\n    stage: SessionStage,\r\n    log: Log,\r\n    startTimeMs: number,\r\n    endTimeMs: number\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
